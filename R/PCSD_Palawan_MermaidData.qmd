---
title: "Dumaran Monitoring"
author: "PCSD Staff"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
      cache: false
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```

# Preparations
Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)
library(easystats)
library(knitr)
library(sf)
library(rnaturalearth)
library(brms)
library(rstan)
library(tidybayes)
library(patchwork)
library(DHARMa)
library(HDInterval)
library(emmeans)
library(maps)
library(ggspatial)
source('helperFunctions.R')
```

# Read in the data

We will start off by reading in the raw `HorseshoeReefSite1.csv` data.
There are many functions in R that can read in a CSV file. We will use
a the `read_csv()` function as it is part of the tidyverse ecosystem.

```{r}
#| label: readData
dat <- read_csv("../data/Dumaran_LIT_data.csv", trim_ws = TRUE)
```


::: {.panel-tabset}

## glimpse
```{r}
#| label: examinData
dat |> glimpse() 
```

## head
```{r}
#| label: examinData1
## Explore the first 6 rows of the data
dat |> head() 
```

## str
```{r}
#| label: examinData2
dat |> str() 
```

## Easystats (datawizard)
```{r}
#| label: examinData3
dat |> datawizard::data_codebook() |> knitr::kable() 
```
:::


# Data preparation

Before we can model these data, they need to be processed into a
format compatible with statistical modelling. The necessary wrangling
steps:

1. exclude extraneous (unneeded) fields
2. exclude poor images
3. lengthen the data with respect to classification type
4. join to a labelset lookup
5. tally up the points per date/image/GROUP/type
6. recode transect id
7. fill in the gaps and add the zeros
8. sum to transect level
9. generate a Year field from the sample date

::: {.panel-tabset}

## Exclude fields

Although it is often harmless enough to retain the other fields, it
does make reviewing the data more combersum, so at an early stage
within this exercise, we will probably restrict the data to just the
above fields.

```{r}
#| label: selecting 
dat <- dat |>
  dplyr::select(Site,
    Latitude,
    Longitude,
    Exposure,
    Reef_slope,
    Year,
    Month,
    Day,
    Depth,
    Management_name,
    Benthic_category,
    LIT_CM
    )
dat |> as.data.frame() |> head()
```
### Tally the Benthic Category

```{r}
datcount <- dat |> 
  group_by(Site, Latitude, Longitude, Exposure, Reef_slope, Year, Benthic_category) |> 
  count(name = "COUNT")

dat <- dat |> 
  group_by(Site, Latitude, Longitude, Exposure, Reef_slope, Year, Benthic_category) |> 
  summarise(TOTAL = sum(LIT_CM)) |> 
  ungroup(Benthic_category) |> 
  mutate(PROP = TOTAL/5000) |> 
  left_join(datcount)

dat |> head()
```
::::


## Fill in any gaps

Since the data represent the classification of points in images, they
only include what was present, not what was also absent. For example,
if all five points are Algae, then this also means that all other
functional groups are absent - yet this information is lacking in the
data. For modelling purposes it is vital that we fill in all the zero
values.

To do so, we must create a data set that contains every GROUP in every
IMAGE.


```{r}
GROUPS <- dat |> pull(Benthic_category) |> unique()

data.filler <- dat %>%
  dplyr::select(
    Site,
    Latitude,
    Longitude,        
    Exposure,         
    Reef_slope,
    Year 
    ) |> 
  distinct() |> 
 tidyr::crossing(Benthic_category = GROUPS) 

dat <-
  dat |> 
  full_join(data.filler) |>
  group_by(
    across(c(
        Site,
        Latitude,
        Longitude,        
        Exposure,         
        Reef_slope,
        Year,
        Benthic_category)
    )) |> 
  mutate(COUNT = ifelse(is.na(COUNT), 0, COUNT),
         PROP = ifelse(is.na(PROP), 0, PROP)
  ) |> 
  ungroup(Benthic_category) |> 
  mutate(TOTAL = sum(COUNT)) |> 
  ungroup()
  
dat |> as.data.frame() |> head() 
```




### Time series plot

```{r}
#| label: EDA1
#| fig.width: 6
#| fig.height: 4
dat |>
  filter(Benthic_category == "Hard coral") |> 
  ggplot(aes(y =  100*COUNT/TOTAL * PROP, x = Site)) +
  geom_point() +
  scale_y_continuous("Hard coral cover (%)") +
  scale_x_discrete("Site") + 
  theme_classic() +
  theme(axis.text = element_text(angle = 30, hjust = 1))
```

```{r}
palawan_lit <- read.csv("../data/Dumaran_LIT_data.csv")
```
 
```{r}
albina_lit <- palawan_lit |>
  dplyr::filter(Site == "Albina Reef") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
albina_long <- rep(albina_lit$Benthic_attribute, albina_lit$LIT_CM) |>
  cbind(Site = "Albina Reef") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
banawa_lit <- palawan_lit |>
  dplyr::filter(Site == "Banawa Pt.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
banawa_long <- rep(banawa_lit$Benthic_attribute, banawa_lit$LIT_CM) |>
  cbind(Site = "Banawa Pt.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
cabugawan_lit <- palawan_lit |>
  dplyr::filter(Site == "Cabugawan Island") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
cabugawan_long <- rep(cabugawan_lit$Benthic_attribute, cabugawan_lit$LIT_CM) |>
  cbind(Site = "Cabugawan Island") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
calaparan_lit <- palawan_lit |>
  dplyr::filter(Site == "Calaparan Reef") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
calaparan_long <- rep(calaparan_lit$Benthic_attribute, calaparan_lit$LIT_CM) |>
  cbind(Site = "Calaparan Reef") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
calasag_lit <- palawan_lit |>
  dplyr::filter(Site == "Calasag Pt.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
calasag_long <- rep(calasag_lit$Benthic_attribute, calasag_lit$LIT_CM) |>
  cbind(Site = "Calasag Pt.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
capayas_lit <- palawan_lit |>
  dplyr::filter(Site == "Capayas") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
capayas_long <- rep(capayas_lit$Benthic_attribute, capayas_lit$LIT_CM) |>
  cbind(Site = "Capayas") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
danleg_lit <- palawan_lit |>
  dplyr::filter(Site == "Danleg") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
danleg_long <- rep(danleg_lit$Benthic_attribute, danleg_lit$LIT_CM) |>
  cbind(Site = "Danleg") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
lagan_lit <- palawan_lit |>
  dplyr::filter(Site == "Lagan") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
lagan_long <- rep(lagan_lit$Benthic_attribute, lagan_lit$LIT_CM) |>
  cbind(Site = "Lagan") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
ligit_lit <- palawan_lit |>
  dplyr::filter(Site == "Ligit") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
ligit_long <- rep(ligit_lit$Benthic_attribute, ligit_lit$LIT_CM) |>
  cbind(Site = "Ligit") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
locot_lit <- palawan_lit |>
  dplyr::filter(Site == "Locot Pt.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
locot_long <- rep(locot_lit$Benthic_attribute, locot_lit$LIT_CM) |>
  cbind(Site = "Locot Pt.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
lotong_lit <- palawan_lit |>
  dplyr::filter(Site == "Lotong Pt.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
lotong_long <- rep(lotong_lit$Benthic_attribute, lotong_lit$LIT_CM) |>
  cbind(Site = "Lotong Pt.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
magsaysay_lit <- palawan_lit |>
  dplyr::filter(Site == "Magsaysay") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
magsaysay_long <- rep(magsaysay_lit$Benthic_attribute, magsaysay_lit$LIT_CM) |>
  cbind(Site = "Magsaysay") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
maruyoruyog_lit <- palawan_lit |>
  dplyr::filter(Site == "Maruyoruyog Is.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
maruyoruyog_long <- rep(maruyoruyog_lit$Benthic_attribute, maruyoruyog_lit$LIT_CM) |>
  cbind(Site = "Maruyoruyog Is.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
mayabaca_lit <- palawan_lit |>
  dplyr::filter(Site == "May-abaca") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
mayabaca_long <- rep(mayabaca_lit$Benthic_attribute, mayabaca_lit$LIT_CM) |>
  cbind(Site = "May-abaca.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
nagtalula_lit <- palawan_lit |>
  dplyr::filter(Site == "Nagtalula") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
nagtalula_long <- rep(nagtalula_lit$Benthic_attribute, nagtalula_lit$LIT_CM) |>
  cbind(Site = "Nagtalula") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```
```{r}
piawi_lit <- palawan_lit |>
  dplyr::filter(Site == "Piawi Pt.") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
piawi_long <- rep(piawi_lit$Benthic_attribute, piawi_lit$LIT_CM) |>
  cbind(Site = "Piawi Pt.") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
pinagtubusan_lit <- palawan_lit |>
  dplyr::filter(Site == "Pinagtubusan") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
pinagtubusan_long <- rep(pinagtubusan_lit$Benthic_attribute, pinagtubusan_lit$LIT_CM) |>
  cbind(Site = "Pinagtubusan") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
puntod_lit <- palawan_lit |>
  dplyr::filter(Site == "Puntod Reef") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
puntod_long <- rep(puntod_lit$Benthic_attribute, puntod_lit$LIT_CM) |>
  cbind(Site = "Puntod Reef") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
talalaen_lit <- palawan_lit |>
  dplyr::filter(Site == "Talalaen") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
talalaen_long <- rep(talalaen_lit$Benthic_attribute, talalaen_lit$LIT_CM) |>
  cbind(Site = "Talalaen") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
talaytay_lit <- palawan_lit |>
  dplyr::filter(Site == "Talaytay Island") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
talaytay_long <- rep(talaytay_lit$Benthic_attribute, talaytay_lit$LIT_CM) |>
  cbind(Site = "Talaytay Island") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
tamungan_lit <- palawan_lit |>
  dplyr::filter(Site == "Tamungan_Dumaran Bay") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
tamungan_long <- rep(tamungan_lit$Benthic_attribute, tamungan_lit$LIT_CM) |>
  cbind(Site = "Tamungan_Dumaran Bay") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```

```{r}
tourism_lit <- palawan_lit |>
  dplyr::filter(Site == "Tourism Site") |>
  dplyr::select(Benthic_attribute, LIT_CM)
```

```{r}
tourism_long <- rep(tourism_lit$Benthic_attribute, tourism_lit$LIT_CM) |>
  cbind(Site = "Tourism Site") |>
  as_tibble() |>
  rename(Benthos = V1) |>
  slice(seq(1, 5000, 50))
```


## Combine data

```{r}
data_sets <- na.omit(str_extract(ls(), ".*_long"))

dat <- rbind(albina_long, banawa_long, cabugawan_long, calaparan_long, calasag_long, capayas_long, danleg_long, lagan_long, ligit_long, locot_long, lotong_long, magsaysay_long, maruyoruyog_long, mayabaca_long, nagtalula_long, piawi_long, pinagtubusan_long, puntod_long, talaytay_long, tamungan_long, tourism_long)

dat <- dat |> 
  group_by(Site, Benthos) |> 
  count(name = "COUNT") |> 
  ungroup(Benthos) |> 
  mutate(TOTAL = sum(COUNT))
  
```

## Fill in the zeros (blanks)

```{r}
GROUPS <- dat |> pull(Benthos) |> unique()
data.filler <- dat |> 
  dplyr::select(Site) |> 
  distinct() |> 
  crossing(Benthos = GROUPS)
dat <- dat |> 
  full_join(data.filler) |> 
  mutate(COUNT = ifelse(is.na(COUNT), 0, COUNT)) |> 
  mutate(TOTAL = ifelse(is.na(TOTAL), max(TOTAL, na.rm = TRUE), TOTAL))
```

## Assign groups 

```{r}
dat <- dat |> 
  mutate(Groups = case_when(Site %in% 
                              c("Albina Reef", "Calaparan Reef", "Capayas", 
                                "Danleg", "Ligit", "Locot Pt.", "Magsaysay", 
                                "Puntod Reef", "Talalaen") ~ "Dumaran Mainland",
                            Site %in% c("Banawa Pt.", "Calasag Pt.", "Lagan", 
                                        "Nagtalula", "Piawi Pt.", "Pinagtubusan",
                                        "Tamungan_Dumaran Bay", "Cabugawan Island") ~ "Dumaran Island",
                            Site %in% c("Lotong Pt.", "Maruyoruyog Is.", "May-abaca.",
                                        "Talaytay Island", "Tourism Site") ~ "Dumaran Islet")
         )
```


:::



## Exploratory data analysis

::: {.panel-tabset}
```{r}
dat |>
  filter(Benthos == "Hard coral") |> 
  ggplot(aes(y = COUNT/TOTAL, x = Site)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))
  
```
```{r}
dat |>
  filter(Benthos == "Hard coral") |> 
  ggplot(aes(y = COUNT/TOTAL, x = Groups)) +
  geom_boxplot() 
 
  
```
:::



```{r, mhiden=TRUE}
#| label: hard coral
dat_hc <- dat |>
  filter(Benthos == "Hard coral") |>
  droplevels()
```

```{r}
dat_hc |> 
  mutate(COVER = COUNT/TOTAL) |> 
  group_by(Groups) |> 
  summarise(
    qlogis(mean(COVER)),
    qlogis(sd(COVER))
  )
```


# Fit models

::: {.panel-tabset}

## Binomial model
```{r}
priors <- prior(normal(0, 1), class = "Intercept") +
  prior(normal(0, 1), class ="b") +
  prior(student_t(3, 0, 1), class = "sd")
```

```{r}
form <- bf(COUNT | trials(TOTAL) ~ Groups + (1|Site),
           family = binomial(link = "logit"))
```

```{r}
model1 <- brm(form,
              data = dat_hc,
              prior = priors,
              sample_prior = "only",
              iter = 5000,
              warmup = 1000,
              chains = 3,
              cores = 3,
              thin = 5,
              refresh = 0,
              backend = "rstan")
```
```{r}
model1 |> conditional_effects() |> 
  plot() |> 
  _[[1]] +
  geom_point(data = dat_hc, aes(y = COUNT/TOTAL, x = Groups), inherit.aes=FALSE)
```

```{r}
model1 <-
  model1 |> update(sample_prior = "yes")
```

```{r}
model1 |> 
  conditional_effects() |> 
  plot() |> 
  _[[1]] +
  geom_point(data = dat_hc, aes(y = COUNT/TOTAL, x = Groups), inherit.aes = FALSE)
```

$$
\begin{align}
y_{i} &\sim{} Bin(\pi_{i}, n_{i})\\
log\left(\frac{\pi_i}{1-\pi_i}\right) &= \beta_0 + \beta_{1i}  + \beta_{2i} + \beta_{3i}\\
\beta_0 \sim{} N(0, 1)\\
\beta_{1-3} \sim{} N(0, 1)\\
\end{align}
$$


:::: {.panel-tabset}

### Define priors
```{r}
model1 |> SUYR_prior_and_posterior()
```

### Fit prior only model

```{r}
model1$fit |> stan_trace()
```
```{r}
model1$fit |> stan_ac()
```
```{r}
model1$fit |> stan_rhat()
```
```{r}
model1$fit |> stan_ess()
```

### Fit full model





### MCMC sampling diagnostics


### Posterior probability checks
```{r}
model1 |> pp_check(type = 'dens_overlay', ndraws = 100)
```

### Model validation

```{r}
resids <- model1 |> make_brms_dharma_res(integerResponse = FALSE)
```

```{r}
#| fig.width: 15
#| fig.height: 15
wrap_elements(~testUniformity(resids)) +
  wrap_elements(~plotResiduals(resids, form = factor(rep(1, nrow(dat_hc))))) +
  wrap_elements(~plotResiduals(resids)) +
  wrap_elements(~testDispersion(resids))
```

::::

:::

# Model posterior summaries


```{r}
model1 |> 
as_draws_df() |> 
dplyr::select(starts_with("b_")) |>
  mutate(across(everything(), exp)) |> 
  summarise_draws(median,
                  hdi,
                  rhat,
                  length,
                  Pl = ~mean(. < 1),
                  Pg = ~mean(. > 1)
                  ) |> 
  knitr::kable()
```


# Further explorations

::: {.panels-tabset}

## Pairwise constrasts
```{r}
model1 |> 
  conditional_effects() |> 
  plot() |> 
  _[[1]] +
  geom_point(data = dat_hc, aes(y = COUNT/TOTAL, x = Groups), inherit.aes = FALSE)
```
Express differences as absolute change in percentage units
```{r}
model1 |> emmeans(~Groups, type = 'response') |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  summarise(median_hdci(.value),
            Pl = mean(.value < 0),
            Pg = mean(.value > 0))
```

Express change as percentage change in percentage units
```{r}
model1 |> emmeans(~Groups, type = 'response') |> 
  regrid() |> 
  regrid(trans = "log") |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  mutate(.value = exp(.value)) |> 
  summarise(median_hdci(.value),
            Pl = mean(.value < 1),
            Pg = mean(.value > 1))
```
If we want to express this in percentage units
```{r}
100*(0.9589 - 1)
```
```{r}
dat_hc |> ungroup() |> summarise(Cover = sd(COUNT/TOTAL, na.rm = TRUE))


model1 |> emmeans(~Groups, type = 'response') |> 
  regrid() |> 
  pairs() |> 
  rope(range = c(-0.1, 0.1)*0.2) 
```
```{r}
dat_hc |> 
  group_by(Groups,Site) |> 
  summarise(mean(COUNT/TOTAL)) |> 
  as.data.frame()
```



## Specific contrasts

```{r}
model2 |> 
  emmeans(~site_name) |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  mutate(contrast = str_replace_all(contrast, "site_name", "")) |> 
  ggplot(aes(x = .value, y = contrast)) +
  stat_halfeye(aes(fill = after_stat(level)), .width = c(0.66, 0.95, 1)) +
  scale_fill_brewer() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous("Cover Difference") +
  scale_y_discrete("") +
  theme_classic()
  
```


## R2

```{r}
model1 |> 
  bayes_R2(summary = FALSE, re_form = NA) |> 
  median_hdci()
```
```{r}
model1 |> 
  bayes_R2(summary = FALSE, re_form = ~(1|Site)) |> 
  median_hdci()
```

```{r}
g1 <-
  model1 |> 
  emmeans(~Groups) |> 
  gather_emmeans_draws() |> 
  mutate(fit = plogis(.value)) |> 
  summarise(median_hdci(fit)) |> 
  ggplot(aes(y = y, x = Groups)) +
  geom_pointrange(aes(ymin = ymin, ymax = ymax)) +
  scale_y_continuous("Benthos", labels = scales::label_number(scale = 100)) +
  scale_x_discrete("") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))
```

```{r}
g2 <-
  model1 |> 
  emmeans(~Groups) |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  mutate(contrast = str_replace_all(contrast, "Groups", "")) |> 
  ggplot(aes(x = .value, y = contrast)) +
  stat_halfeye(aes(fill = after_stat(level)), .width = c(0.66, 0.95, 1)) +
  scale_fill_brewer() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous("Sites") +
  scale_y_discrete("") +
  theme_classic()
```

```{r}
g1 + g2
(g1 + annotate_npc(" a)", x = 0, y = 1, hjust = 0, vjust = 1)) +
  (g2+ annotate_npc(" b)", x = 0, y = 1, hjust = 0, vjust = 1))
```



:::
# Summary figures

## Model

```{r}
dat <- dat
```


```{r}
aus <- rnaturalearth::ne_countries(scale = 10, country = "Philippines", returnclass = "sf")
  ggplot() + geom_sf(data = aus)
```
```{r}
reefs <- read_sf("../data/GIS/reef_500_poly.shp")
ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue")
```
```{r}
dat <- dat |> 
  st_as_sf(coords = c("Longitude", "Latitude"), 
      remove = FALSE, 
      crs = 4326)
dat
```
```{r}
bbox <- dat |> 
  st_bbox()
```

```{r}
bbox
bbox
```
```{r}
dat
bbox <- dat |> st_buffer(dist = units::as_units(20, "km")) |> st_bbox()
bbox
bbox1 <- bbox

ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")])
ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  ggspatial::annotation_north_arrow(location = "tr") +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")])
site_map <- ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  ggspatial::annotation_north_arrow(location = "tr") +
  ggspatial::annotation_scale() +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")]) +
  
  theme_bw()
site_map
```


```{r}
#dat
bbox <- dat |> st_buffer(dist = units::as_units(250, "km")) |> st_bbox()
#bbox

overview_map <-ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = st_as_sfc(bbox1), fill="red", alpha = 0.3, size=2) +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")]) +
  theme_bw()
```

```{r}
  site_map + inset_element(overview_map + 
                           theme(axis.title = element_blank(),
                                 axis.text = element_blank(),
                                 axis.ticks = element_blank()),
                         left = 0.55, bottom = 0.01,
                         right = 0.99, top = 0.35) 
```















