---
title: "Snake Island Monitoring"
author: "Dan Clark Bacani"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    css: ../resources/ws_style.css
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4
    fig-height: 4
    fig-dpi: 72
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
      cache: false
    ## Rendering
    embed-resources: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  tbl-title: '**Table**'
  tbl-labels: arabic
engine: knitr
output_dir: "docs"
documentclass: article
fontsize: 12pt
mainfont: Arial
mathfont: LiberationMono
monofont: DejaVu Sans Mono
classoption: a4paper
bibliography: ../resources/references.bib
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```

# Preparations
Load the necessary libraries

```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false

library(tidyverse)
library(easystats)
library(knitr)
library(sf)
library(rnaturalearth)
library(brms)
library(rstan)
library(tidybayes)
library(patchwork)
library(DHARMa)
library(HDInterval)
library(emmeans)
library(maps)
library(ggspatial)
source('helperFunctions.R')
```

# Read in the data

We will start off by reading in the raw `HorseshoeReefSite1.csv` data.
There are many functions in R that can read in a CSV file. We will use
a the `read_csv()` function as it is part of the tidyverse ecosystem.

```{r}
#| label: readData
dat <- read_csv("../data/SnakeIsland_Reef_Monitoring.csv", trim_ws = TRUE)
```


::: {.panel-tabset}

## glimpse
```{r}
#| label: examinData
dat |> glimpse() 
```

## head
```{r}
#| label: examinData1
## Explore the first 6 rows of the data
dat |> head() 
```

## str
```{r}
#| label: examinData2
dat |> str() 
```

## Easystats (datawizard)
```{r}
#| label: examinData3
dat |> datawizard::data_codebook() |> knitr::kable() 
```
:::


# Data preparation

Before we can model these data, they need to be processed into a
format compatible with statistical modelling. The necessary wrangling
steps:

1. exclude extraneous (unneeded) fields
2. exclude poor images
3. lengthen the data with respect to classification type
4. join to a labelset lookup
5. tally up the points per date/image/GROUP/type
6. recode transect id
7. fill in the gaps and add the zeros
8. sum to transect level
9. generate a Year field from the sample date

::: {.panel-tabset}

## Exclude fields

Although it is often harmless enough to retain the other fields, it
does make reviewing the data more combersum, so at an early stage
within this exercise, we will probably restrict the data to just the
above fields.

```{r}
#| label: selecting 
dat <- dat |>
  dplyr::select(site_id,
    site_name,
    site_latitude,
    site_longitude,
    survey_start_date,
    survey_depth,
    survey_transect_number,
    image_id,
    image_quality,
    point_id,
    point_num,
    point_machine_classification,
    point_human_classification
    )
dat |> as.data.frame() |> head()
```


## Excluding poor images

```{r}
#| label: filter
dat <-
  dat |>
  dplyr::filter(is.na(image_quality) | image_quality != 0)  
dat |> as.data.frame() |> head()
dat |> dim()
```


## Lengthen the data

```{r}
#| label: pivot
dat <-
  dat |>
  pivot_longer(cols = matches("point_.*_classification"),
    names_to = "type",
    values_to = "classification"
    ) 
dat |> as.data.frame() |> head()
```

## Joining to the group code lookup data
Our primary interest in these data will be in exploring patterns in
broad taxanomic groups such as *Hard coral* and *algae*. Since the
machine learning tools behind ReefCloud are tuned to classify to finer
taxonomic resolutions, next task will be to use a lookup table so as
to assign the higher order group codes (HC and A) to the data.

```{r}
#| label: readLabelset
labelset <- read_csv("../data/Palawan_Monitoring.csv", trim_ws = TRUE) 
```

:::: {.panel-tabset}

### glimpse
```{r}
#| label: examineLabelset
labelset |> glimpse() 
```

### head
```{r}
#| label: examineLabelset1
## Explore the first 6 rows of the labelseta
labelset |> head() 
```

### str
```{r}
#| label: examineLabelset2
labelset |> str() 
```

### Easystats (datawizard)
```{r}
#| label: examineLabelset3
labelset |> datawizard::data_codebook() |> knitr::kable() 
```
::::

```{r}
#| label: join
dat <-
  dat |>
  left_join(labelset |>
              dplyr::select(CODE, GROUP = `FUNCTIONAL GROUP`),
              by = c("classification" = "CODE")
    )
dat |> as.data.frame() |> head() 
```

## Tally up points

Count the number of points of each type as well as sum up the total
number of points per image.

```{r}
#| label: count
dat <- 
  dat |> 
  group_by(across(c(starts_with("site"),
    starts_with("survey"),
    type,
    image_id,
    GROUP))
  ) |>
  summarise(COUNT = n(), .groups = "keep") |> 
  ungroup(GROUP) |>
  mutate(TOTAL = sum(COUNT)) |>
  ungroup() 
dat |> as.data.frame() |> head() 
```

## Recode transects

```{r}
#| label: recode_transects
dat <- 
  dat |>
  mutate(transect_id = paste0(site_id, survey_transect_number)) 
dat |> as.data.frame() |> head() 
```

## Fill in any gaps

Since the data represent the classification of points in images, they
only include what was present, not what was also absent. For example,
if all five points are Algae, then this also means that all other
functional groups are absent - yet this information is lacking in the
data. For modelling purposes it is vital that we fill in all the zero
values.

To do so, we must create a data set that contains every GROUP in every
IMAGE.


```{r}
GROUPS <- dat |> pull(GROUP) |> unique()
data.filler <- dat %>%
  dplyr::select(
    starts_with("site"),
    survey_start_date,
    #Year,
    survey_depth,
    transect_id,
    image_id,
    type,
    ## GROUP,
    TOTAL) |> 
  distinct() |> 
 tidyr::crossing(GROUP = GROUPS) 

dat <-
  dat |> 
  full_join(data.filler) |>
  group_by(
    across(c(starts_with("site"),
      survey_start_date,
      #Year,
      survey_depth,
      transect_id,
      image_id,
      type,
      GROUP
    ))) |> 
  mutate(COUNT = ifelse(is.na(COUNT), 0, COUNT),
    TOTAL = max(TOTAL, na.rm = TRUE)
  )
dat |> as.data.frame() |> head() 
```

## Sum to transect level


```{r}
## Now sum up to transect level
dat <- 
  dat |>
  ungroup(image_id) |>
  summarise(COUNT = sum(COUNT),
    TOTAL = sum(TOTAL)
  ) |> 
  ungroup() |> 
  droplevels()
dat |> as.data.frame() |> head() 
```

## Generate a year field

```{r}
#| label: mutateYear
dat <-
  dat |>
  mutate(Year = lubridate::year(survey_start_date),
    TropYear = lubridate::year(survey_start_date + months(3))
  ) 
dat |> as.data.frame() |> head() 
```

## Generate Reef_id

```{r}
#| label: mutataReef_id
dat <-
  dat |>
  mutate(Reef_id = str_replace(site_name, "(.*) Site.*", "\\1"))

dat |> as.data.frame() |> head() 
```


## Remove White Beach

```{r}
dat <- dat |> 
  filter(site_name != "White Beach")
```

### Time series plot

```{r}
#| label: EDA1
#| fig.width: 6
#| fig.height: 4
dat |>
  filter(type == "point_machine_classification", GROUP == "HC") |> 
  ggplot(aes(y =  100*COUNT/TOTAL, x = site_name)) +
  geom_point() +
  geom_line(aes(group = transect_id)) + 
  scale_y_continuous("Hard coral cover (%)") +
  scale_colour_discrete("Survey depth (m)") +
  scale_x_discrete("Site") + 
  theme_classic()
```

### Boxplots

```{r}
#| label: EDA2
#| fig.width: 6
#| fig.height: 4
dat |>
  filter(type == "point_machine_classification", GROUP == "HC") |> 
  ggplot(aes(y =  100*COUNT/TOTAL, x = site_name, colour = factor(survey_depth))) +
  geom_boxplot()
```
:::

## Exploratory data analysis

::: {.panel-tabset}

:::



```{r, mhiden=TRUE}
#| label: hard coral
dat_hc <- dat |>
  filter(GROUP == "HC") |>
  droplevels()
```

```{r}
dat_hc |> 
  mutate(COVER = COUNT/TOTAL) |> 
  group_by(site_name, type) |> 
  summarise(
    qlogis(mean(COVER)),
    qlogis(sd(COVER))
  )
```


# Fit models

::: {.panel-tabset}

## Binomial model
```{r}
priors <- prior(normal(0, 1), class = "Intercept")+
  prior(normal(0, 1), class ="b") +
  prior(student_t(3, 0, 1), class = "sd")
```

```{r}
form <- bf(COUNT | trials(TOTAL) ~ site_name + (1|transect_id),
           family = binomial(link = "logit"))
```

```{r}
model1 <- brm(form,
              data = dat_hc,
              prior = priors,
              sample_prior = "only",
              iter = 5000,
              warmup = 1000,
              chains = 3,
              cores = 3,
              thin = 5,
              refresh = 0,
              backend = "rstan")
```
```{r}
model1 |> conditional_effects() |> 
  plot() |> 
  _[[1]] #+
  #geom_point(data = dat_hc, aes(y = COUNT/TOTAL, x = site_name, inherit.aes = FALSE))
#model1 <- update(model1, sample_prior = "yes")
```

```{r}
model1 <-
  model1 |> update(sample_prior = "yes")
```

```{r}
model1 |> 
  conditional_effects() |> 
  plot() |> 
  _[[1]] #+
  #geom_point(data = dat_hc, aes(y = COUNT/TOTAL, x = site_name), inherit.aes = FALSE)
```

$$
\begin{align}
y_{i} &\sim{} Bin(\pi_{i}, n_{i})\\
log\left(\frac{\pi_i}{1-\pi_i}\right) &= \beta_0 + \beta_{1i}  + \beta_{2i} + \beta_{3i}\\
\beta_0 \sim{} N(0, 1)\\
\beta_{1-3} \sim{} N(0, 1)\\
\end{align}
$$


:::: {.panel-tabset}

### Define priors
```{r}
model1 |> SUYR_prior_and_posterior()
```

### Fit prior only model

```{r}
model1$fit |> stan_trace()
```
```{r}
model1$fit |> stan_ac()
```
```{r}
model1$fit |> stan_rhat()
```
```{r}
model1$fit |> stan_ess()
```

### Fit full model





### MCMC sampling diagnostics


### Posterior probability checks
```{r}
model1 |> pp_check(type = 'dens_overlay', ndraws = 100)
```

### Model validation

```{r}
resids <- model1 |> make_brms_dharma_res(integerResponse = FALSE)
```

```{r}
#| fig.width: 15
#| fig.height: 15
wrap_elements(~testUniformity(resids)) +
  wrap_elements(~plotResiduals(resids, form = factor(rep(1, nrow(dat_hc))))) +
  wrap_elements(~plotResiduals(resids)) +
  wrap_elements(~testDispersion(resids))
```

::::

## Beta-Binomial model

$$
\begin{align}
y_{i} &\sim{} Beta-Bin(\pi_{i}, n_{i})\\
log\left(\frac{\pi_i}{1-\pi_i}\right) &= \beta_0 + \beta_{1i}  + \beta_{2i} + \beta_{3i}\\
\beta_0 \sim{} N(0, 1)\\
\beta_{1-3} \sim{} N(0, 1)\\
\end{align}
$$

:::: {.panel-tabset}

### Define priors
```{r}
priors <- prior(normal(0, 1), class = "Intercept") +
  prior(normal(0, 3), class = "b") +
  prior(gamma(0.01, 0.01), class = "phi")
```

```{r}
form <- bf(COUNT | trials(TOTAL) ~ site_name + (1|transect_id), family = beta_binomial(link = "logit"))
```

```{r}
model2 <- brm(form,
              data = dat_hc,
              prior = priors,
              sample_prior = "only",
              iter = 5000,
              warmup = 1000,
              chains = 3,
              cores = 3,
              thin = 5,
              refresh = 0,
              backend = "rstan",
              control = list(adapt_delta = 0.99, max_treedepth = 20)
)
```


```{r}
model2 |> conditional_effects() |> 
  plot() |> 
  _[[1]]
```

```{r}
model2 <- update(model2, sample_prior = "yes")
```
```{r}
model2 |> conditional_effects() |> 
  plot() |> 
  _[[1]]
```

```{r}
model2 |> SUYR_prior_and_posterior()
```
```{r}
model2$fit |> stan_trace()
```
```{r}
model2$fit |> stan_ac()
```
```{r}
model2$fit |> stan_rhat()
```
```{r}
model2$fit |> stan_ess()
```




### Fit prior only model




### Fit full model





### MCMC sampling diagnostics


### Posterior probability checks
```{r}
model2 |> pp_check(type = 'dens_overlay', ndraws = 100)
```

```{r}
resids <- model2 |> make_brms_dharma_res(integerResponse = FALSE)
```

```{r}
#| fig.width: 15
#| fig.height: 15
wrap_elements(~testUniformity(resids)) +
  wrap_elements(~plotResiduals(resids, form = factor(rep(1, nrow(dat_hc))))) +
  wrap_elements(~plotResiduals(resids)) +
  wrap_elements(~testDispersion(resids))
```

### Model validation

```{r}
model2 |> 
  as_draws_df() |> 
  summarise_draws(median,
           hdi,
           rhat,
           length,
           ess_bulk,
           ess_tail) |> 
  knitr::kable()
```


::::

:::

# Model posterior summaries


```{r}
model2 |> 
as_draws_df() |> 
dplyr::select(starts_with("b_")) |>
  mutate(across(everything(), exp)) |> 
  summarise_draws(median,
                  hdi,
                  rhat,
                  length,
                  Pl = ~mean(. < 1),
                  Pg = ~mean(. > 1)
                  ) |> 
  knitr::kable()
```


# Further explorations

::: {.panels-tabset}

## Pairwise constrasts
```{r}
model2 |> emmeans(~site_name, type = 'response') |> 
  pairs()

model2 |> emmeans(~site_name, type = 'response') |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  summarise(median_hdci(.value),
            Pl = mean(.value < 0),
            Pg = mean(.value > 0))
```


If we want to express this in percentage units



## Specific contrasts

```{r}
model2 |> 
  emmeans(~site_name) |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  mutate(contrast = str_replace_all(contrast, "site_name", "")) |> 
  ggplot(aes(x = .value, y = contrast)) +
  stat_halfeye(aes(fill = after_stat(level)), .width = c(0.66, 0.95, 1)) +
  scale_fill_brewer() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous("Cover Difference") +
  scale_y_discrete("") +
  theme_classic()
  
```


## R2

```{r}
model2 |> 
  bayes_R2(summary = FALSE) |> 
  median_hdci()
```

```{r}
g1 <-
  model2 |> 
  emmeans(~site_name) |> 
  gather_emmeans_draws() |> 
  mutate(fit = plogis(.value)) |> 
  summarise(median_hdci(fit)) |> 
  ggplot(aes(y = y, x = site_name)) +
  geom_pointrange(aes(ymin = ymin, ymax = ymax)) +
  scale_y_continuous("Coral cover (%)", labels = scales::label_number(scale = 100)) +
  scale_x_discrete("") +
  theme_classic()
```

```{r}
g2 <-
  model2 |> 
  emmeans(~site_name) |> 
  regrid() |> 
  pairs() |> 
  gather_emmeans_draws() |> 
  mutate(contrast = str_replace_all(contrast, "site_name", "")) |> 
  ggplot(aes(x = .value, y = contrast)) +
  stat_halfeye(aes(fill = after_stat(level)), .width = c(0.66, 0.95, 1)) +
  scale_fill_brewer() +
  geom_vline(xintercept = 0, linetype = "dashed") +
  scale_x_continuous("Cover Difference") +
  scale_y_discrete("") +
  theme_classic()
```

```{r}
g1 + g2
(g1 + annotate_npc(" a)", x = 0, y = 1, hjust = 0, vjust = 1)) +
  (g2+ annotate_npc(" b)", x = 0, y = 1, hjust = 0, vjust = 1))
```



:::
# Summary figures

## Model
```{r}
dat
```
```{r}
dat |> ggplot(aes(y = site_latitude, x = site_longitude)) +
  geom_point()
```


```{r}
aus <- rnaturalearth::ne_countries(scale = 10, country = "Philippines", returnclass = "sf")
  ggplot() + geom_sf(data = aus)
```
```{r}
reefs <- read_sf("../data/GIS/reef_500_poly.shp")
ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue")
```
```{r}
dat <- dat |> 
  st_as_sf(coords = c("site_longitude", "site_latitude"), 
      remove = FALSE, 
      crs = 4326)
dat
```
```{r}
bbox <- dat |> 
  st_bbox()
```

```{r}
bbox
bbox
```
```{r}
dat
bbox <- dat |> st_buffer(dist = units::as_units(20, "km")) |> st_bbox()
bbox
bbox1 <- bbox

ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")])
ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  ggspatial::annotation_north_arrow(location = "tr") +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")])
site_map <- ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = reefs, fill = "lightblue") +
  geom_sf(data = dat) +
  ggspatial::annotation_north_arrow(location = "tr") +
  ggspatial::annotation_scale() +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")]) +
  
  theme_bw()
site_map
```


```{r}
#dat
bbox <- dat |> st_buffer(dist = units::as_units(200, "km")) |> st_bbox()
#bbox

overview_map <-ggplot() +
  geom_sf(data = aus) +
  geom_sf(data = st_as_sfc(bbox1), fill="red", alpha = 0.5, size=2) +
  coord_sf(xlim = bbox[c("xmin","xmax")], ylim = bbox[c("ymin", "ymax")]) +
  theme_bw()
```


```{r}
site_map + inset_element(overview_map + 
                           theme(axis.title = element_blank(),
                                 axis.text = element_blank(),
                                 axis.ticks = element_blank()),
                         left = 0.55, bottom = 0.01,
                         right = 0.99, top = 0.45) 
```















